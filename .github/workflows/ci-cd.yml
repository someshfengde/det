name: Setup Poetry, check formatting and style, and run the tests

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: make cicd_setup

    - name: Install dependencies
      run: make install

    - name: Cache Poetry virtualenv
      uses: actions/cache@v2
      with:
        path: .venv
        key: ${{ runner.os }}-py${{ matrix.python-version }}-venv-${{ hashFiles('**/poetry.lock') }}

    - name: Run Format Checks
      run: make check_format

    - name: Run Style Checks
      run: make check_style

    - name: Run the tests
      run: make test

  release:
    permissions:
      contents: write
    needs: test
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for all tags and branches
          ref: refs/heads/main  # specify the main branch explicitly

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: make cicd_setup

      - name: Install dependencies
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: make install

      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # This token is provided by Actions, no need to create it
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # This token is provided by Actions, no need to create it
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}  # This token should be created in PyPI and set in your repo's secrets
        run: |
          echo "versioning and publishing the package"
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry run semantic-release version
          poetry publish --skip-existing
